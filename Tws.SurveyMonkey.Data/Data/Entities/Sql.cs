namespace Tws.SurveyMonkey.Data.Entities
{
    public static class Sql
    {
        public const string SurveySelectAll = "SELECT Id, SurveyEntityId, Title, Category, QuestionCount, PageCount, ResponseCount, CreatedDate, ModifiedDate FROM dbo.SMSurvey";
        public const string SurveyInsert = "INSERT dbo.SMSurvey(SurveyEntityId, Title, Category, QuestionCount, PageCount, ResponseCount, CreatedDate, ModifiedDate) OUTPUT INSERTED.* VALUES(@ObjectId, @Title, @Category, @QuestionCount, @PageCount, @ResponseCount, @CreatedDate, @ModifiedDate);";

        public const string SurveyPageSelectAll = @"SELECT Id, PageEntityId, SMSurveyId, Title, Description, QuestionCount, [Order] FROM dbo.SMPage";
        public const string SurveyPageInsert = "INSERT dbo.SMPage(PageEntityId, SMSurveyId, Title, Description, QuestionCount, [Order])  OUTPUT INSERTED.* VALUES(@ObjectId, @SMSurveyId, @Title, @Description, @QuestionCount, @Order);";
                                                  
        public const string SurveyQuestionSelectAll = @"SELECT Id, QuestionEntityId, SMPageId, QuestionType, Question, [Order] from dbo.SMQuestion";
        public const string SurveyQuestionInsert = "INSERT dbo.SMQuestion(QuestionEntityId, SMPageId, QuestionType, Question, [Order]) OUTPUT INSERTED.* VALUES(@ObjectId, @SMPageId, @QuestionType, @Question, @Order);";

        public const string SurveyCollectorSellectAll = @"SELECT Id, CollectorEntityId, SMSurveyId, Name, Type, Email FROM dbo.SMCollector";
        public const string SurveyCollectorInsert = "INSERT dbo.SMCollector(CollectorEntityId, SMSurveyId, Name, Type, Email) OUTPUT INSERTED.* VALUES(@ObjectId, @SMSurveyId, @Name, @Type, @Email);";

        public const string CollectorRecipientSelectAll = @"SELECT Id, RecipientEntityId, SMCollectorId, Email, PhoneNumber from dbo.SMRecipient";
        public const string CollectorRecipientInsert = "INSERT dbo.SMRecipient(RecipientEntityId, SMCollectorId, Email, PhoneNumber) OUTPUT INSERTED.* VALUES(@ObjectId, @SMCollectorId, @Email, @PhoneNumber);";
                                                          

        public const string SurveyQuestionChoiceSelectAll = @"select Id, ChoiceEntityId, SMQuestionId, Name, [Order] from dbo.SMChoice";
        public const string SurveyQuestionChoiceInsert = "INSERT dbo.SMChoice(ChoiceEntityId, SMQuestionId, Name, [Order]) OUTPUT INSERTED.* VALUES(@ObjectId, @SMQuestionId, @Name, @Order);";

        public const string SurveyResponseSelectAll = @"SELECT  Id, ResponseEntityId, Status, IpAddress, SurveyEntityId, CollectorEntityId, RecipientEntityId, PageEntityId, QuestionEntityId, ChoiceEntityId, [Text] from SMResponse";
        public const string SurveyResponseInsert = "INSERT SMResponse(ResponseEntityId, Status, IpAddress, SurveyEntityId, CollectorEntityId, RecipientEntityId, PageEntityId, QuestionEntityId, ChoiceEntityId, Text) OUTPUT INSERTED.*  VALUES(@ObjectId, @Status, @IpAddress, @SurveyEntityId, @CollectorEntityId, @RecipientEntityId, @PageEntityId, @QuestionEntityId, @ChoiceEntityId, @Text);";

        public const string MergeSMResponse = "MERGE INTO SMResponse AS [Target] USING (VALUES (@ObjectId, @status, @surveyEntityId, @collectorEntityId, @recipiententityid, @pageentityid, @questionentityid, @choiceentityid, @text, @ipaddress)  ) AS [Source] (ResponseEntityId, [status], surveyentityid, collectorentityid, recipiententityid, pageentityid, questionentityid, choiceentityid, [text], ipaddress) ON ([Target].ResponseEntityId = [Source].ResponseEntityId AND [Target].surveyentityid = [Source].surveyentityid AND [Target].collectorentityid = [Source].collectorentityid AND [Target].recipiententityid = [Source].recipiententityid AND [Target].pageentityid = [Source].pageentityid AND [Target].questionentityid = [Source].questionentityid ) WHEN MATCHED THEN  UPDATE SET   [Target].choiceentityid = [Source].choiceentityid,    [Target].[text] = [Source].[text]  WHEN NOT MATCHED BY TARGET THEN  INSERT(ResponseEntityId, [status], surveyentityid, collectorentityid, recipiententityid, pageentityid, questionentityid, choiceentityid, [text], ipaddress) VALUES (source.ResponseEntityId, source.[status], source.surveyentityid, source.collectorentityid, source.recipiententityid, source.pageentityid, source.questionentityid, source.choiceentityid, source.[text], source.ipaddress)  ;";

        //public const string MergeSMMessage= "MERGE INTO SMMessage AS [Target] USING (VALUES (@ObjectId, @Status, @SMCollectorId, @IsScheduled, @EmbedFirstQuestion, @Subject, @Body, @Type, @ScheduledDate)  ) AS [Source] (MessageEntityId, [status], smCollectorId, isScheduled, embedFirstQuestion, [subject], [body], [type], scheduledDate) ON ([Target].[MessageEntityId] = [Source].[MessageEntityId] AND [Target].[SMCollectorId] = [Source].[SMCollectorId] ) WHEN MATCHED THEN  UPDATE SET   [Target].[Status] = [Source].[Status], [Target].[IsScheduled] = [Source].[IsScheduled], [Target].[EmbedFirstQuestion] = [Source].[EmbedFirstQuestion], [Target].[Subject] = [Source].[Subject], [Target][Body] = [Source].[Body], [Target].[Type] = [Source].[Type], [Target].[ScheduledDate] = [Source].[ScheduledDate]  WHEN NOT MATCHED BY TARGET THEN  INSERT(MessageEntityId, [status], smCollectorId, isScheduled, embedFirstQuestion, [subject], [body], [type], scheduledDate) VALUES ( source.MessageEntityId, source.[status], source.smCollectorId, source.isScheduled, source.embedFirstQuestion, source.[subject], source.body, source.[type], source.scheduledDate);";
        public const string MergeSMMessage = "MERGE INTO SMMessage AS [Target] USING (VALUES (@ObjectId, @Status, @SMCollectorId, @IsScheduled, @EmbedFirstQuestion,  @Subject, @HtmlBody, @Type, @ScheduledDate)  ) AS [Source] (MessageEntityId, [status], smCollectorId, isScheduled, embedFirstQuestion, [subject], [htmlbody], [type], scheduledDate) ON ([Target].[MessageEntityId] = [Source].[MessageEntityId] AND [Target].[SMCollectorId] = [Source].[SMCollectorId] ) WHEN MATCHED THEN  UPDATE SET   [Target].[Status] = [Source].[Status], [Target].[IsScheduled] = [Source].[IsScheduled], [Target].[EmbedFirstQuestion] = [Source].[EmbedFirstQuestion], [Target].[Subject] = [Source].[Subject], [Target].[Type] = [Source].[Type], [Target].[ScheduledDate] = [Source].[ScheduledDate]  WHEN NOT MATCHED BY TARGET THEN  INSERT(MessageEntityId, [status], smCollectorId, isScheduled, embedFirstQuestion, [subject], [htmlbody], [type], scheduledDate) VALUES ( source.MessageEntityId, source.[status], source.smCollectorId, source.isScheduled, source.embedFirstQuestion, source.[subject],source.htmlbody, source.[type], source.scheduledDate);";
    }
}
